/**
The description of Test:


You are going to be given an array of integers. Your job is to take that array and find an index N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. If there is no index that would make this happen, return -1.

For example:

Let's say you are given the array {1,2,3,4,3,2,1}:
Your function will return the index 3, because at the 3rd position of the array, the sum of left side of the index ({1,2,3}) and the sum of the right side of the index ({3,2,1}) both equal 6.

Let's look at another one.
You are given the array {1,100,50,-51,1,1}:
Your function will return the index 1, because at the 1st position of the array, the sum of left side of the index ({1}) and the sum of the right side of the index ({50,-51,1,1}) both equal 1.

Last one:
You are given the array {20,10,-80,10,10,15,35}
At index 0 the left side is {}
The right side is {10,-80,10,10,15,35}
They both are equal to 0 when added. (Empty arrays are equal to 0 in this problem)
Index 0 is the place where the left side and right side are equal.

Note: Please remember that in most programming/scripting languages the index of an array starts at 0.

Input:
An integer array of length 0 < arr < 1000. The numbers in the array can be any integer positive or negative.

Output:
The lowest index N where the side to the left of N is equal to the side to the right of N. If you do not find an index that fits these rules, then you will return -1.

Note:
If you are given an array with multiple answers, return the lowest correct index.
An empty array should be treated like a 0 in this problem.
*/

/**

My Solutions
*/


/**
1.数组下标为0的三八线时,和数组下标为Array.length-1
2.遍历数组，遍历过程中计算左右两边的值
3.定义两个函数，
函数一：计算数组下标为0~（N-1）的数组元素的和；
函数二:计算数组下标为（n+1）~(Array.length-1)的数组元素的和；
4.比较函数1和函数2的和是否相等，相等就返回N，不相等就继续遍历数组，寻找N

 */

Array.prototype.getLeftSum = function (arr, index) {
	var[sum, i] = [0, 0];
	while (i < index) {
		sum += arr[i];
		i++;
	}
	return sum;
}

Array.prototype.getRightSum = function (arr, index) {
	var[sum, i] = [0, arr.length - 1];
	while (i > index) {
		sum += arr[i];
		i--;
	}
	return sum;
}

function findEvenIndex(arr) {
	var flag = -1;
	for (var i = 0; i < arr.length; i++) {
		if (i === 0 && arr.getRightSum(arr, i) === 0) {
			flag = i;
			break;
		}

		if (i === (arr.length - 1) && arr.getLeftSum(arr, i) === 0) {
			flag = i;
			break;
		}
		var leftSum = arr.getLeftSum(arr, i);
		var rightSum = arr.getRightSum(arr, i);
		if (leftSum === rightSum) {
			flag = i;
			break;
		}

	}

	return flag;
}
//var arr=[1,2,3,4,3,2,1]
//var arr=[1,100,50,-51,1,1];
//var arr=[20,10,-80,10,10,15,35];
//var arr=[1,2,3,4,5,6];
//var arr=[20,10,30,10,10,15,35];
var arr = [10, -80, 10, 10, 15, 35, 20];
console.log(findEvenIndex(arr));


/**
The Best Solutions of Other developer in CodeWar
*/

//Solution 1

function findEvenIndex(arr)
{
  for(var i=1; i<arr.length-1; i++) {
    if(arr.slice(0, i).reduce((a, b) =>  a+b) === arr.slice(i+1).reduce((a, b) =>  a+b)) {
      return i;
    }
  }
  return -1;
}

//Solution 2

function findEvenIndex(arr)
{
  var left = 0, right = arr.reduce(function(pv, cv) { return pv + cv; }, 0);
  for(var i = 0; i < arr.length; i++) {
      if(i > 0) left += arr[i-1];
      right -= arr[i];
      
      if(left == right) return i;
  }
  
  return -1;
}


//Solution 3

const sum = (a, from, to) => a.slice(from, to).reduce((a, b) => a + b, 0)
const findEvenIndex = a => a.findIndex((el, i) => sum(a, 0, i) === sum(a, i + 1));
