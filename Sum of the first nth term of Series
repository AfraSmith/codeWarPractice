/**
The description of the Test in CodeWar:



Your task is to write a function which returns the sum of following series upto nth term(parameter).

Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...
Rules:
You need to round the answer to 2 decimal places and return it as String.

If the given value is 0 then it should return 0.00

You will only be given Natural Numbers as arguments.

Examples:
SeriesSum(1) => 1 = "1.00"
SeriesSum(2) => 1 + 1/4 = "1.25"
SeriesSum(5) => 1 + 1/4 + 1/7 + 1/10 + 1/13 = "1.57"
NOTE: In PHP the function is called series_sum().

*/
/**
My Solution
*/

/**
1.参数为1，不加
2.参数N>1时，分母=1+（N-1）*3
3.返回值四舍五入保留两位小数
 */

function SeriesSum(n) {
	if (n >= 1) {
		var[sum, i] = [1, 1];

		var flag = n + 1; //写在外面，比写在循环条件里，计算次数更少
		while (i < flag) {
			var index = i - 1; //表示加几个3
			if (index != 0) { //n ！=1时
				sum = sum + (1 / (1 + (index * 3)));
			}
			i++;

		}
	} else {
		var sum = 0;
	}
	return sum.toFixed(2);
}

SeriesSum(20);



/**

The Solutions of other people in CodeWar
*/


//Solution 1
function SeriesSum(n) {
  for (var s = 0, i = 0; i < n; i++) {
    s += 1 / (1 + i * 3)
  }
  
  return s.toFixed(2)
}

//Solution 2

function SeriesSum(n, s = 0) {
    return n ? SeriesSum(n - 1, s + 1 / (3 * n - 2)) : s.toFixed(2)
}
